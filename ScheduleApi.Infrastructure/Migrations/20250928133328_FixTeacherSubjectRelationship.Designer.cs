// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScheduleBotApi.Infrastructure.Contexts;

#nullable disable

namespace ScheduleBotApi.Infrastructure.Migrations
{
    [DbContext(typeof(ScheduleContext))]
    [Migration("20250928133328_FixTeacherSubjectRelationship")]
    partial class FixTeacherSubjectRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScheduleApi.Core.Entities.ApplicationDayOfWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationDaysOfWeek");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.GroupSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherSubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TeacherSubjectId");

                    b.HasIndex("GroupId", "TeacherSubjectId", "SemesterId")
                        .IsUnique();

                    b.ToTable("GroupSubjects");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.InfoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InfoTypes");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.OverrideType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OverrideTypes");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Pair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("Pairs");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TimeZoneId")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationDayOfWeekId")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupSubjectId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEvenWeek")
                        .HasColumnType("boolean");

                    b.Property<int>("PairId")
                        .HasColumnType("integer");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupSubjectId");

                    b.HasIndex("PairId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("ApplicationDayOfWeekId", "PairId", "GroupSubjectId", "IsEvenWeek")
                        .IsUnique();

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.ScheduleOverride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OverrideDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OverrideTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubstituteDayOfWeekId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("OverrideTypeId");

                    b.HasIndex("SubstituteDayOfWeekId");

                    b.ToTable("ScheduleOverrides");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StartDate", "EndDate")
                        .IsUnique();

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.SocialMediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SocialMediaTypes");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SubjectNameId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubjectTypeId");

                    b.HasIndex("SubjectNameId", "SubjectTypeId")
                        .IsUnique();

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.SubjectInfo", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("InfoTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SubjectId", "InfoTypeId");

                    b.HasIndex("InfoTypeId");

                    b.ToTable("SubjectInfos");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.SubjectName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation")
                        .IsUnique();

                    b.ToTable("SubjectNames");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.SubjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubjectTypes");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.TeacherInfo", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("InfoTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TeacherId", "InfoTypeId");

                    b.HasIndex("InfoTypeId");

                    b.ToTable("TeacherInfos");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.TeacherSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LessonUrl")
                        .HasColumnType("text");

                    b.Property<int?>("SocialMediaTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SocialMediaTypeId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId", "SubjectId")
                        .IsUnique();

                    b.ToTable("TeacherSubjects");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<long?>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.GroupSubject", b =>
                {
                    b.HasOne("ScheduleApi.Core.Entities.Group", "Group")
                        .WithMany("GroupSubjects")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleApi.Core.Entities.Semester", "Semester")
                        .WithMany("GroupSubjects")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleApi.Core.Entities.Subject", null)
                        .WithMany("GroupSubjects")
                        .HasForeignKey("SubjectId");

                    b.HasOne("ScheduleApi.Core.Entities.Teacher", null)
                        .WithMany("GroupSubjects")
                        .HasForeignKey("TeacherId");

                    b.HasOne("ScheduleApi.Core.Entities.TeacherSubject", "TeacherSubject")
                        .WithMany("GroupSubjects")
                        .HasForeignKey("TeacherSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Semester");

                    b.Navigation("TeacherSubject");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Schedule", b =>
                {
                    b.HasOne("ScheduleApi.Core.Entities.ApplicationDayOfWeek", "ApplicationDayOfWeek")
                        .WithMany("Schedules")
                        .HasForeignKey("ApplicationDayOfWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScheduleApi.Core.Entities.Group", null)
                        .WithMany("Schedules")
                        .HasForeignKey("GroupId");

                    b.HasOne("ScheduleApi.Core.Entities.GroupSubject", "GroupSubject")
                        .WithMany("Schedules")
                        .HasForeignKey("GroupSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleApi.Core.Entities.Pair", "Pair")
                        .WithMany("Schedules")
                        .HasForeignKey("PairId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScheduleApi.Core.Entities.Semester", null)
                        .WithMany("Schedules")
                        .HasForeignKey("SemesterId");

                    b.HasOne("ScheduleApi.Core.Entities.Subject", null)
                        .WithMany("Schedules")
                        .HasForeignKey("SubjectId");

                    b.HasOne("ScheduleApi.Core.Entities.Teacher", null)
                        .WithMany("Schedules")
                        .HasForeignKey("TeacherId");

                    b.Navigation("ApplicationDayOfWeek");

                    b.Navigation("GroupSubject");

                    b.Navigation("Pair");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.ScheduleOverride", b =>
                {
                    b.HasOne("ScheduleApi.Core.Entities.Group", "Group")
                        .WithMany("ScheduleOverrides")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScheduleApi.Core.Entities.OverrideType", "OverrideType")
                        .WithMany("ScheduleOverrides")
                        .HasForeignKey("OverrideTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScheduleApi.Core.Entities.ApplicationDayOfWeek", "SubstituteDayOfWeek")
                        .WithMany("ScheduleOverrides")
                        .HasForeignKey("SubstituteDayOfWeekId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Group");

                    b.Navigation("OverrideType");

                    b.Navigation("SubstituteDayOfWeek");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Subject", b =>
                {
                    b.HasOne("ScheduleApi.Core.Entities.SubjectName", "SubjectName")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScheduleApi.Core.Entities.SubjectType", "SubjectType")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubjectName");

                    b.Navigation("SubjectType");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.SubjectInfo", b =>
                {
                    b.HasOne("ScheduleApi.Core.Entities.InfoType", "InfoType")
                        .WithMany("SubjectInfos")
                        .HasForeignKey("InfoTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScheduleApi.Core.Entities.Subject", "Subject")
                        .WithMany("SubjectInfos")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InfoType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.TeacherInfo", b =>
                {
                    b.HasOne("ScheduleApi.Core.Entities.InfoType", "InfoType")
                        .WithMany("TeacherInfos")
                        .HasForeignKey("InfoTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScheduleApi.Core.Entities.Teacher", "Teacher")
                        .WithMany("TeacherInfos")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InfoType");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.TeacherSubject", b =>
                {
                    b.HasOne("ScheduleApi.Core.Entities.SocialMediaType", "SocialMediaType")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("SocialMediaTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ScheduleApi.Core.Entities.Subject", "Subject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleApi.Core.Entities.Teacher", "Teacher")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMediaType");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.User", b =>
                {
                    b.HasOne("ScheduleApi.Core.Entities.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScheduleApi.Core.Entities.Region", "Region")
                        .WithMany("Users")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.ApplicationDayOfWeek", b =>
                {
                    b.Navigation("ScheduleOverrides");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Group", b =>
                {
                    b.Navigation("GroupSubjects");

                    b.Navigation("ScheduleOverrides");

                    b.Navigation("Schedules");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.GroupSubject", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.InfoType", b =>
                {
                    b.Navigation("SubjectInfos");

                    b.Navigation("TeacherInfos");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.OverrideType", b =>
                {
                    b.Navigation("ScheduleOverrides");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Pair", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Region", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Semester", b =>
                {
                    b.Navigation("GroupSubjects");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.SocialMediaType", b =>
                {
                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Subject", b =>
                {
                    b.Navigation("GroupSubjects");

                    b.Navigation("Schedules");

                    b.Navigation("SubjectInfos");

                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.SubjectName", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.SubjectType", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.Teacher", b =>
                {
                    b.Navigation("GroupSubjects");

                    b.Navigation("Schedules");

                    b.Navigation("TeacherInfos");

                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("ScheduleApi.Core.Entities.TeacherSubject", b =>
                {
                    b.Navigation("GroupSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
